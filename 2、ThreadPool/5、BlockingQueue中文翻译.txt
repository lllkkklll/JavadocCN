---------------------------- BlockingQueue类Javadoc文档翻译

一个支持额外操作的队列, 当获取元素时等待队列非空, 并且当存储元素时等待空间可用。

BlockingQueue方法有四种形式, 处理操作的不同方法不能马上被满足, 但可能在未来的某个点上被满足: 第一种, 抛出异常; 第二种, 返回一个特殊值(非空即假, 取决于操作); 第三种, 无限期堵塞当前线程直到操作成功; 第四种, 放弃前堵塞给定的最大时间限制。这些方法在如下表格汇总: 

BlockingQueue方法的汇总信息
          Throws exception        Special value       Blocks        Times out
Insert        add(e)                 offer(e)         put(e)        offer(e, time, unit)
Remove        remove()                poll()          take()        poll(time, unit)
Examine       element()               peek()       not applicable   not applicable

BlockingQueue不接受空元素。当尝试add、put或offer一个空元素, 实现会抛出NullPointerException。null用作标记值来表示poll操作失败。

BlockingQueue可能有容量限制。在任何给定时间内, 它会有一个剩余容量, 超过这个容量就不能放置额外元素而不会堵塞。没有任何内置容量限制的BlockingQueue, 总是会报告一个剩余容量值Integer.MAX_VALUE。

BlockingQueue的实现被设计出来, 主要用于生产者-消费者队列, 但同时支持Collection接口。因此, 作为案例, 他可以使用remove(x)从队列中删除一个任意元素。但是, 类似操作通常不会执行得非常高效, 并且只是用来偶尔使用, 正如当取消排队的消息时。 

BlockingQueue实现是线程安全的。所有的队列方法使用内部的锁或其他并发控制形式, 来原子地达成它们的作用。然而, 批量的Collection操作addAll、containsAll、retainAll和removeAll不是必须要原子执行的, 除非在实现中指定。因此有可能, 如: addAll(c)在添加了c中仅部分元素后失败(抛出一个异常)。

BlockingQueue本质上不会支持任何种类的"close"或"shutdown"操作, 来表示不会有更多元素被添加。类似特征的需求和用法, 往往取决于实现。例如, 常规策略是: 生产者插入特殊的结束流或有毒对象, 当消费者获取时会相应地进行解释。

使用案例, 以常规的生产者-消费者场景为基础。注意: BlockingQueue可以被多个生产者和多个消费者安全地使用。
  
 class Producer implements Runnable {
   private final BlockingQueue queue;
   Producer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { queue.put(produce()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   Object produce() { ... }
 }

 class Consumer implements Runnable {
   private final BlockingQueue queue;
   Consumer(BlockingQueue q) { queue = q; }
   public void run() {
     try {
       while (true) { consume(queue.take()); }
     } catch (InterruptedException ex) { ... handle ...}
   }
   void consume(Object x) { ... }
 }

 class Setup {
   void main() {
     BlockingQueue q = new SomeQueueImplementation();
     Producer p = new Producer(q);
     Consumer c1 = new Consumer(q);
     Consumer c2 = new Consumer(q);
     new Thread(p).start();
     new Thread(c1).start();
     new Thread(c2).start();
   }
 }

内存一致性影响: 正如其他的并发集合一样, 放入对象到BlockingQueue之前的线程动作, 发生在其他线程从BlockingQueue中获取或删除对应元素的后续动作之前。(即: 生产者动作优先于消费者动作。)

这个接口是Java Collections框架中的一员。
