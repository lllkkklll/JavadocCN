---------------------------- Random类Javadoc文档翻译

这个类的实例用于生成一个伪随机数的流。这个类使用48-bit种子, 这个种子使用线性同余公式修改。(查找Donald Knuth, 计算机程序设计艺术, 第二册, 3.2.1小节)

如果两个Random实例使用相同的种子创建, 并且对每个实例调用相同的方法序列, 它们将生成并返回相同的数字序列。为了保证这个属性, 为Random类指定了特定的算法。为了Java代码的绝对可移植性, Java实现必须使用这里为Random类展示的所有算法。但是, Random类的子类可以使用其他算法, 只要它们遵守所有方法的通用契约。

Random类实现的算法使用一个受保护的实用程序方法, 在每次调用中可以提供多达32个伪随机生成的位。

许多应用会发现Math.random方法使用更简单。

java.util.Random实例时线程安全的。但是, 跨线程并发使用相同的java.util.Random实例, 可能会遇到争用, 从而导致性能较差。考虑在多线程设计下, 使用java.util.concurrent.ThreadLocalRandom替代。

java.util.Random实例在加密上不安全。考虑使用java.security.SecureRandom替换, 来获取一个加密安全的伪随机数生成器, 供安全敏感的应用程序使用。

