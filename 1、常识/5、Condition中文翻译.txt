---------------------------------- Condition类中文翻译

Condition将对象的monitor方法(wait、notify和notifyAll)提取到不同的对象中, 通过将任意Lock实现使用组合在一起, 使每个对象拥有多个等待集合的效果。Lock替代了synchronized方法和语句的使用位置, Condition替代了对象monitor方法。

Conditions(也称为condition队列或condition变量), 为线程暂停执行("wait")提供了方法, 直到被其它线程通知某些状态Condition可能为真为止。因为访问这个共享的状态信息发生在不同的线程, 因此必须被保护, 所以将某些形式的锁与condition关联。等待condition提供的关键属性是, 自动地释放关联锁并暂停当前线程, 就像Object.wait。

Condition实例本质上绑定在锁上。为了获取特定Lock实例的Condition实例, 可以使用它的newCondition()方法。

举个例子, 假设我们有一个支持put和take方法的有界缓冲区(buffer)。如果尝试在空的buffer上进行take, 那么线程将会阻塞住直到元素可用; 如果尝试在满的buffer上进行put, 那么线程将会堵塞直到空间可用。我们希望将等待的put线程和take线程保存在独立的等待集合中(wait-sets), 因此我们可以使用优化方案, 当元素或空间可用时, 在buffer中一次只通知一个线程。这可以使用两个Condition实例来实现。

class BoundedBuffer {
  final Lock lock = new ReentrantLock();
  final Condition notFull  = lock.newCondition(); 
  final Condition notEmpty = lock.newCondition(); 

  final Object[] items = new Object[100];
  int putptr, takeptr, count;

  public void put(Object x) throws InterruptedException {
    lock.lock();
    try {
      while (count == items.length)
        notFull.await();
      items[putptr] = x;
      if (++putptr == items.length) putptr = 0;
      ++count;
      notEmpty.signal();
    } finally {
      lock.unlock();
    }
  }
  
  public Object take() throws InterruptedException {
    lock.lock();
    try {
      while (count == 0)
        notEmpty.await();
      Object x = items[takeptr];
      if (++takeptr == items.length) takeptr = 0;
      --count;
      notFull.signal();
      return x;
    } finally {
      lock.unlock();
    }
  }
}

(java.jtil.concurrent.ArrayBlockingQueue类提供了这样的功能, 因此不必实现这个简单的用例。)

Condition实现可以提供与Object monitor方法不一样的行为和语义, 例如保障的通知顺序, 或执行通知时不需要持有锁。如果实现提供了类似的专门化语义, 那么实现必须记录下这些语义。

注意Condition实例只是一个普通对象, 并且他们自身可以当做synchronized语句的目标使用, 并且可以调用他们自己的monitor的等待和通知方法。获取Condition实例的monitor锁、使用它自己的monitor方法(wait, notify/notifyAll), 和获取该Condition关联的锁、使用它的等待、信号方法, 没有特别的联系。为了避免混乱, 建议不要以这种方式使用Condition实例, 除非可能在它们自己的实现内。

除非特别指定, 否则为任何参数传递空值都会导致抛出空指针异常(NullPointerException)。

************************************************************
实现的注意事项:
  1、当Condition等待时, 通常来说, 底层平台语义的让步, 允许出现"假唤醒"。这对大多数应用开发没有任何实际的影响, 因为Condition应该总是在循环中等待, 测试正在等待的状态断言。实现可以自由地删除假唤醒的功能, 但建议应用开发人员总是假定它们可能发生, 因此总是在循环中等待。
  2、condition等待的三种格式(可中断、不可中断和定时)在某些平台上实现的容易程度和表现特征, 可能有所不同。特别是, 提供这些特征和维护特定语义如: 顺序保障, 可能是困难的。此外, 中断线程实际挂起的能力, 可能不是所有平台都可行的。
  3、所以, 实现不必为waiting的全部的三种形式, 定义完全相同的保证和语义, 也不必支持线程实际挂起的中断。
  4、实现需要清楚地记录由各个waiting方法提供的语义和保证, 并且当实现支持中断线程的挂起时, 然后必须遵守接口中定义的中断语义。
  5、中断往往意味着取消, 并且检查中断通常都比较复杂。实现更倾向于中断, 而不是正常的方法返回。即使可能显示中断发生在另一个可能解除线程阻塞的操作之后, 这也是对的。实现应该记录下这个行为。


######################################## Method ############################################
----------------------------------------- void await() throws InterruptedException;
导致当前线程等待, 直到它被通知或被中断。

这个Condition关联的锁会被自动释放, 并且为了线程调度目的, 当前线程不可用, 并且处于休眠状态直到四件事情中的一个发生:
  1、其他线程调用了这个Condition的signal方法, 并且当前线程被选为唤醒线程;
  2、其他线程调用了这个Condition的signalAll方法;
  3、其他线程中断了当前线程, 并且支持线程挂起的中断;
  4、假唤醒的出现。

在所有情况下, 本方法返回之前, 当前线程必须重新获取这个condition相关的锁。当线程返回时, 它保证持有这个锁。

如果当前线程:
  1、进入这个方法时, 已经设置了它的中断状态
  2、当获取锁时被中断, 且当前线程支持锁获取的中断
那么就会抛出中断异常(InterruptedException), 且当前线程的中断状态会被清除。在第一个例子中, 没有指定是否在锁释放之前进行中断测试。

实现的注意事项:
  1、当调用这个方法时, 假定当前线程持有这个Condition相关联的锁。它由实现来判定是不是这种情况, 如果不是, 如何响应。通常来说, 会抛出一个异常(如IllegalMonitorStateException), 并且实现必须记录下这个事实。
  2、实现可能更倾向于响应中断, 而不是响应信号的正常方法返回。在这种情况下, 实现必须确保信号被重定向到另一个等待线程(如果有的话)。

----------------------------------------- void awaitUninterruptibly();
导致当前线程等待, 直到被通知。

这个Condition关联的锁会被自动释放,  并且为了线程调度目的, 当前线程不可用, 并且处于休眠状态直到三件事情中的一个发生:
  1、其他线程调用了这个Condition的signal方法, 并且当前线程被选为唤醒线程;
  2、其他线程调用了这个Condition的signalAll方法;
  3、假唤醒的出现。

在所有情况下, 本方法返回之前, 当前线程必须重新获取这个condition相关的锁。当线程返回时, 它保证持有这个锁。

如果当前线程的中断状态是在它进入这个方法时设置的, 或者它在等待时被中断了, 它会继续等待直到被通知。当它最终从这个方法返回时, 它的中断状态仍然会被设置。

实现的注意事项:
  1、当调用这个方法时, 假定当前线程持有这个Condition相关联的锁。它由实现来判定是不是这种情况, 如果不是, 如何响应。通常来说, 会抛出一个异常(如IllegalMonitorStateException), 并且实现必须记录下这个事实。


----------------------------------------- long awaitNanos(long nanosTimeout) throws InterruptedException;
导致当前线程等待, 直到它被通知或被中断, 或者超过了指定的等待时间。

这个Condition关联的锁会被自动释放, 并且为了线程调度目的, 当前线程不可用, 并且处于休眠状态直到发生五件事情中的一个:
  1、其它线程调用了这个Condition的signal方法, 并且当前线程被选为唤醒线程;
  2、其它线程调用了这个Condition的signalAll方法;
  3、其它线程中断了 , 且支持中断线程挂起;
  4、超过指定的等待时间;
  5、假唤醒的出现

在所有情况下, 本方法返回之前, 当前线程必须重新获取这个condition相关的锁。当线程返回时, 它保证持有这个锁。

如果当前线程:
  1、进入这个方法时, 已经设置了它的中断状态
  2、当获取锁时被中断, 且当前线程支持锁获取的中断
那么就会抛出中断异常(InterruptedException), 且当前线程的中断状态会被清除。在第一个例子中, 没有指定是否在锁释放之前进行中断测试。

该方法返回时, 根据给定的nanosTimeout值, 返回剩余等待的纳秒数的估计值。 或者超时的话, 返回小于或等于零的值。当等待返回但等待条件不成立的情况下, 这个值被用来决定是否重新等待或重新等待多久。这个方法常规使用形式如下:

  boolean aMethod(long timeout, TimeUnit unit) {
   long nanos = unit.toNanos(timeout);
   lock.lock();
   try {
     while (!conditionBeingWaitedFor()) {
       if (nanos <= 0L)
         return false;
       nanos = theCondition.awaitNanos(nanos);
     }
     // ...
   } finally {
     lock.unlock();
   }
 }

设计注意: 这个方法需要一个纳米值参数, 以避免报告剩余时间时出现截断错误。这种精度损失, 将使程序员难以确保当重新等待发生时, 总等待时间不会系统地短于指定的时间。

实现的注意事项:
  1、当调用这个方法时, 假定当前线程持有这个Condition相关联的锁。它由实现来判定是不是这种情况, 如果不是, 如何响应。通常来说, 会抛出一个异常(如IllegalMonitorStateException), 并且实现必须记录下这个事实。
  2、实现更倾向于响应中断, 而不是响应信号的正常方法返回, 或者更倾向于表示超过指定的等待时间。无论哪种情况, 实现必须确保信号被重定向到另一个等待线程(如果有的话)。


----------------------------------------- boolean await(long time, TimeUnit unit) throws InterruptedException;
导致当前线程等待, 直到它被通知或被中断, 或者超过了指定的等待时间。这个方法等价于:
  awaitNanos(unit.toNanos(time)) > 0


----------------------------------------- boolean awaitUntil(Date deadline) throws InterruptedException;
导致当前线程等待, 直到它被通知或被中断, 或者指定的最后期限流逝

这个Condition关联的锁会被自动释放, 并且为了线程调度目的, 当前线程会被禁用且处于休眠状态, 直到发生五件事情中的一个:
  1、其它线程调用了这个Condition的signal方法, 并且当前线程被选为唤醒线程;
  2、其它线程调用了这个Condition的signalAll方法;
  3、其它线程中断了当前线程, 且支持中断线程挂起;
  4、指定的最后期限流逝
  5、假唤醒的出现

所有情况下, 本方法返回之前, 当前线程必须重新获取这个condition相关的锁。当线程返回时, 它保证持有这个锁。

如果当前线程:
  1、进入这个方法时, 已经设置了它的中断状态
  2、当获取锁时被中断, 且当前线程支持锁获取的中断
那么就会抛出中断异常(InterruptedException), 且当前线程的中断状态会被清除。在第一个例子中, 没有指定是否在锁释放之前进行中断测试。

返回值表示最后期限是否流逝, 可以按如下方式使用:
  
 boolean aMethod(Date deadline) {
   boolean stillWaiting = true;
   lock.lock();
   try {
     while (!conditionBeingWaitedFor()) {
       if (!stillWaiting)
         return false;
       stillWaiting = theCondition.awaitUntil(deadline);
     }
     // ...
   } finally {
     lock.unlock();
   }
 }

实现的注意事项:
  1、当调用这个方法时, 假定当前线程持有这个Condition相关联的锁。它由实现来判定是不是这种情况, 如果不是, 如何响应。通常来说, 会抛出一个异常(如IllegalMonitorStateException), 并且实现必须记录下这个事实。
  2、实现更倾向于响应中断, 而不是响应信号的正常方法返回, 或者更倾向于表示超过指定的等待时间。无论哪种情况, 实现必须确保信号被重定向到另一个等待线程(如果有的话)。


----------------------------------------- void signal();
唤醒一个等待线程。

如果有任何线程在等待这个condition, 那么就会选择一个线程进行唤醒。然后, 该线程必须在从await返回之前重新获取锁。

实现的注意事项:
  1、当调用这个方法时, 实现可能(而且通常会)要求当前线程持有这个Condition相关联的锁。实现必须记录这个前提条件, 并且如果没有持有这个锁会发生的任何动作。通常来说, 会抛出异常, 比如IllegalMonitorStateException。


----------------------------------------- void signalAll();
唤醒所有的等待线程。

如果有任何线程在等待这个condition, 那么它们全部被唤醒。每个线程必须在从await返回之前重新获取锁。

实现的注意事项:
  1、当调用这个方法时, 实现可能(而且通常会)要求当前线程持有这个Condition相关联的锁。实现必须记录这个前提条件, 并且如果没有持有这个锁会发生的任何动作。通常来说, 会抛出异常, 比如IllegalMonitorStateException。